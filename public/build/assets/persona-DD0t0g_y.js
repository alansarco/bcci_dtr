var r=Object.defineProperty;var a=(n,e,t)=>e in n?r(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var i=(n,e,t)=>a(n,typeof e!="symbol"?e+"":e,t);import{F as l,S as c}from"./persona-C9k5cQRL.js";class m{constructor(e,t,s=null,o=null){i(this,"onDeviceConnected",e=>{this.updateResultMessage("Device Connected. Place finger on scanner.","green")});i(this,"onDeviceDisconnected",e=>{this.updateResultMessage("Device Disconnected","red")});i(this,"onQualityReported",e=>{const t=e.quality;t===0?console.warn("Fingerprint scan quality is too low. Please check your device."):t<60?console.warn("Fingerprint quality is suboptimal. You may want to try again for better results."):console.log("Fingerprint quality is good.")});i(this,"onSamplesAcquired",e=>{console.log(window.location.pathname);const t=e.samples[0].Data;t&&this.field.value?window.location.pathname==="/"?(this.updateResultMessage("Retrieving Employee Information"),document.getElementById("employee-name").textContent="",document.getElementById("time-in-text").textContent="",document.getElementById("time-out-text").textContent="",fetch("/entries/biometric/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({employee_code:this.field.value})}).then(s=>s.json()).then(s=>{if(!s.success){this.updateResultMessage(s.message,"red");return}this.updateResultMessage("Employee Information Retrieved!"),document.getElementById("employee-name").textContent=`Name: ${s.entry.name}`,document.getElementById("time-in-text").textContent=`Clock In: ${s.entry.clock_in}`,document.getElementById("time-out-text").textContent=`Clock Out: ${s.entry.clock_out}`}).catch(s=>{this.updateResultMessage("Unable to retrieve employee information","red")})):window.location.pathname==="/employees"&&(this.updateResultMessage("Registering Employee Fingerprint"),fetch("/employee/biometric/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({employee_code:this.field.value,fingerprint:t})}).then(s=>s.json()).then(s=>{if(!s.success){this.updateResultMessage(s.message,"red");return}this.updateResultMessage("Employee Fingerprint Registered!","green")}).catch(s=>{console.error(s.message),this.updateResultMessage("Unable to register fingerprint","red")})):this.updateResultMessage("Employee does not exists!","red")});i(this,"compareSamples",(e,t)=>this.fingerprints.includes(e));i(this,"onReaderError",e=>{this.logError(`Capture Error: ${e.error}`)});this.sdk=null,this.acquisitionStarted=!1,this.debugOutput=e,this.resultMessage=t,this.operation=s,this.fingerprints=[],this.currentSample=null,this.field=o}async initialize(){try{this.sdk=new l,this.sdk.on("DeviceConnected",this.onDeviceConnected),this.sdk.on("DeviceDisconnected",this.onDeviceDisconnected),this.sdk.on("QualityReported",this.onQualityReported),this.sdk.on("SamplesAcquired",this.onSamplesAcquired),this.sdk.on("ErrorOccurred",this.onReaderError),await this.sdk.startAcquisition(c.Intermediate)}catch(e){return this.logError(`Initialization Error: ${e.message}`),!1}}async stopCapture(){await this.sdk.stopAcquisition()}updateResultMessage(e,t){this.resultMessage&&(this.resultMessage.textContent=e,this.resultMessage.className=`text-center text-${t}-600`)}logError(e){d(e,"error",this.debugOutput),this.updateResultMessage(e,"red")}}function d(n,e="info",t=null){const o=`[${new Date().toISOString()}] ${e.toUpperCase()}: ${n}`;console.log(o),t&&(t.textContent+=o+`
`,t.scrollTop=t.scrollHeight)}export{m as F};
